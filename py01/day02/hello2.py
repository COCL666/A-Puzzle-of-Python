#!/usr/local/bin/python3
#数据类型分类
#按存储模型分类
#标量：数字，字符串
#容器：列表，元组，字典
#按访问模型分类
#直接：数字
#序列：字符串，列表，元组
#映射：字典
#按更新模型分类
#不可变：数字，字符串，元组
#可变：列表，字典
# >>> s1='python'
# >>> s1[0]='P' 报错
# >>> s1='Python' 可以重新赋值
# >>> s1
# 'Python'
# >>> l1=[10,20]
# >>> l2=l1 l1和l2指向内存相同地址，且内存是可变的
# >>> l2
# [10, 20]
# >>> id(l1)
# 140569267059528
# >>> id(l2)
# 140569267059528
# >>> l2.append(30) 修改l2，也会影响到l1
# >>> l2
# [10, 20, 30]
# >>> l1
# [10, 20, 30]

#判断语句
#除表达式以外，各种各样的数据类型，也可以作为判断语句
# n1=10
# s1='Python'
# if n1>5: 判断条件为真才会执行相应代码块
#     print('yes')
#     print('ok')
# if 'to' not in s1:
#     print('True')
# if -0.0:
#     print('任何值为0的数字都是假')
# if 10:
#     print('非0数字为真')
# if ' ':
#     print('空格字符也是一个字符，为真')
# if '':
#     print('字符串长度为0，为假')
# if [10,20]:
#     print('非空列表，为真,空为假')
# if (10,20):
#     print('非空元组，为真，空为假')
# if {}:
#     print('空字典，为假')
# if None:
#     print('None也为假')
# if not 0:
#     print('0为假，取反为真')

#三元运算符：条件表达式
# >>> a=10
# >>> b=20
# >>> if a<b:
# ...     s1=a
# ... else:
# ...     s1=b
# ...
# >>> s1
# 10
#将以上写为：
# >>> s2=a if a<b else b
# >>> s2
# 10

#random模块
# >>> import random 加载random模块
# >>> random.choice('abc') 使用random模块的choice函数随机选
# 'b'
# >>> random.choice('abc') 字符串
# 'a'
# >>> random.choice(['aa','bb','cc',100]) 列表
# 'cc'
# >>> random.choice(('aa','bb','cc',100)) 元组
# 'bb'
#生成随机数字:random.randint(1,100) #生成100以内的随机整数，包括1和100.

#python的文件名不能是模块名,因为模块是由文件导入的

#循环
#循环次数未知，while循环
#循环次数已知，for循环
#语法
# while 条件:
# 条件为真则执行

#break语句:循环一旦遇到break就结束了，break后面的，在循环体内的语句也不再执行
#continue语句:结束本次循环，但是不终结循环
#else语句:在python中，循环也有else，当循环正常结束(循环条件不满足，导致循环结束)时执行else，如果中间被break终止则不执行else

#for循环，同while用法
#range函数:潜在可以产生很多数字，但是不会立即生成，当向range取值时，它才会生成值，常与for一起使用

#列表解析
# >>> [10] 直接将数字放到列表中
# [10]
# >>> [5*8] 计算放到列表中
# [40]
# >>> [5*5 for i in range(10)] 循环放到列表中
# [25, 25, 25, 25, 25, 25, 25, 25, 25, 25]
# >>> [5+i for i in range(1,11)]
# [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# >>> [5+5 for i in range(10) if i%2==1] 判断放到列表中
# [10, 10, 10, 10, 10]
# >>> [5+i for i in range(10) if i%2==1]
# [6, 8, 10, 12, 14]
# >>> ['192.168.1.%s' %i for i in range(1,255)] 生成192.168.1.0网段的所有地址1..254
# ['192.168.1.1', '192.168.1.2', '192.168.1.3', '192.168.1.4', '192.168.1.5',......]